import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
import 'package:video_player/video_player.dart';

import '../send_alert.dart';

class Vulnerability extends StatefulWidget {
  Vulnerability() : super();

  @override
  VulnerabilityState createState() => VulnerabilityState();
}

class VulnerabilityState extends State<Vulnerability> {
  late VideoPlayerController _controller;
  late Future<void> _initializeVideoPlayerFuture;
  File? _videoFile;
  String predictedClass = "";
  bool predicting = false;

  @override
  void initState() {
    super.initState();
    _controller = VideoPlayerController.asset("videos/sample_video.mp4");
    _initializeVideoPlayerFuture = _controller.initialize();
    _controller.setLooping(true);
    _controller.setVolume(1.0);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _selectVideo() async {
    final imagePicker = ImagePicker();
    final pickedVideo =
        await imagePicker.pickVideo(source: ImageSource.gallery);
    if (pickedVideo != null) {
      setState(() {
        _videoFile = File(pickedVideo.path);
        _controller = VideoPlayerController.file(_videoFile!);
        _initializeVideoPlayerFuture = _controller.initialize();
        _controller.setLooping(true);
        _controller.play();
      });
    }
  }

  Future<void> _predictVideo() async {
    print("Prediction started---------------------------");
    if (_videoFile != null) {
      String ngrokUrl = "https://dfc2-182-156-172-10.ngrok-free.app";
      String apiEndpoint = "$ngrokUrl/predict";

      var request = http.MultipartRequest('POST', Uri.parse(apiEndpoint));
      request.files
          .add(await http.MultipartFile.fromPath('video', _videoFile!.path));

      var response = await request.send();

      if (response.statusCode == 200) {
        var responseBody = await response.stream.bytesToString();
        var jsonResponse = json.decode(responseBody);
        String newPredictedClass = jsonResponse['predicted_class'];
        if (newPredictedClass == "Anomaly") {
          sendPushNotification(
              "Emergency Alert!",
              "Emergency call for crime rescue triggered!\nLocation: 12.991538611222008, 80.24255334941492",
              "cQBS9d39RICHdAyUKOoead:APA91bEnWuDFMWCsPP4P-ZqYHErUM8xXc9D2xdASp3L-efpanTrst6-LHuUjnQAAy7g6JxAc32g1Ot4U1HxuR8o35RVORzlPZ6_WxM9N4aoj9v96xAnFQ-VOrrPT2_pc6zeN1BhiuonH");
        }
        print("Predicted class: $newPredictedClass");
        setState(() {
          predictedClass = newPredictedClass;
        });
      } else {
        print("Error: ${response.reasonPhrase}");
      }
    } else {
      print("No video selected");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue.shade900,
        title: Text("Vulnerability prediction"),
      ),
      body: Column(
        children: [
          FutureBuilder(
            future: _initializeVideoPlayerFuture,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                return Container(
                  width: 400,
                  height: 400,
                  child: Center(
                    child: AspectRatio(
                      aspectRatio: _controller.value.aspectRatio,
                      child: VideoPlayer(_controller),
                    ),
                  ),
                );
              } else {
                return Center(
                  child: CircularProgressIndicator(),
                );
              }
            },
          ),
          Container(
            child: Text("Predicted Class : " + predictedClass),
          ),
          SizedBox(
            height: 20,
          ),
          SizedBox(
            child: ElevatedButton(
              onPressed: _selectVideo,
              child: Text(
                "Select Video",
                style: TextStyle(color: Colors.white),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue.shade900,
                elevation: 2,
                padding: EdgeInsets.symmetric(vertical: 16, horizontal: 30),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(25),
                ),
              ),
            ),
          ),
          SizedBox(
            height: 20,
          ),
          SizedBox(
            child: OutlinedButton(
              style: OutlinedButton.styleFrom(
                side: BorderSide(
                  width: 1.5,
                  color: Colors.grey.shade400,
                ),
                padding: EdgeInsets.symmetric(vertical: 16, horizontal: 46),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(25),
                ),
              ),
              onPressed: () async {
                setState(() {
                  predicting = true;
                });
                await _predictVideo();
                setState(() {
                  predicting = false;
                });
              },
              child: predicting
                  ? CircularProgressIndicator()
                  : Text(
                      "Predict",
                      style: TextStyle(color: Colors.grey[400]),
                    ),
            ),
          ),
        ],
      ),
    );
  }
}
